language: csharp
mono: none
dotnet: 3.1.100
services:
- docker
install:
- dotnet restore API/Solution1.sln
branches:
  except:
  - master
jobs:
  include:
  - stage: build
    name: Build Solution
    script:
    - dotnet build --configuration Release API/Solution1.sln
    - echo "Build"
  - stage: test
    name: Run Tests
    script:
    - dotnet test API/Minitwit.Tests/Minitwit.Tests.csproj
    - echo "Test"
  - stage: deliver
    if: tag IS present
    name: Upload docker image
    env:
    - ORG_NAME=lazyopsdev
    - IMAGE_NAME=api
    - DEFAULT_DOCKER_TAG=latest
    script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - cd API && docker build -t $IMAGE_NAME .
    - docker tag $IMAGE_NAME "$ORG_NAME/$IMAGE_NAME:$TRAVIS_TAG"
    - docker tag $IMAGE_NAME "$ORG_NAME/$IMAGE_NAME:$DEFAULT_DOCKER_TAG"
    - docker push "$ORG_NAME/$IMAGE_NAME:$TRAVIS_TAG"
    - docker push "$ORG_NAME/$IMAGE_NAME:$DEFAULT_DOCKER_TAG"
  - stage: auto-merge
    if: tag IS present
    name: Merge to master
    env:
    - GITHUB_USER_EMAIL="lazyopsdev@gmail.com"
    - GITHUB_USER_NAME="lazyopsdev-ci"
    - GITHUB_REPO_URI="LazyOpsDev/Minitwit.Backend"
    script:
    - git config --global user.email "$GITHUB_USER_EMAIL"
    - git config --global user.name "$GITHUB_USER_NAME"
    - git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* ||
      exit
    - git fetch --all || exit
    - git checkout master || exit
    - git merge --no-ff "$TRAVIS_COMMIT" || exit
    - git remote add travis-origin https://${GITHUB_USER_NAME}:${GITHUB_TOKEN}@github.com/${GITHUB_REPO_URI}.git
      > /dev/null 2>&1
    - git push --quiet --set-upstream travis-origin master
notifications:
  email:
  - krza@itu.dk
  - phko@itu.dk
  - alsb@itu.dk
  - arca@itu.dk
env:
  global:
    secure: u7C09PBS3SRCLopMl05nypTSup94YzWkuHQfZt73m8SSBwfViMyFPbTtarAzbGQDi7iwmHZlvsa7LGdPDm6PYonRC34FvCPtFhVHERMecCPVAZaPz20Kd3NpvrCYkKm7ztELYY9sDq7BliJU9N0O+0z0bF7zsaLbQMUP/ijXp7jBb5FL3pJc0PpHxQHZKZMdbO8KX0OZXfUc9udijXlJo9IsHzwgc7w18o3owb7C2+HFgTiBf3HiMjsLPF9OmbZDOxXsU/NZtjD7fbuZczQRRugT4cuZadhtTQYTeQ9zpURVUo7ZHuXtS+I+FZ87mLgRKFgFEPrCtth0aT1FsobcCz3S4fZdHW2p6teyTo6YeCbj5xqE437f4gF94zjj7KfVqVN5YqFHXrQxvfrnxQZIEoy2IFSkbbK0VjCth/7+asg1QtD9IrhozSTGYQ4TkeOZCSe83+z6hju0XmtjkViTr/ee5PeZo0XBH27pAL0z4KbAy1qnp4EyILA7MTJUPH5X3NjOdhhUL6KPSadop7yGU5VTXFgzWJJAlTn8wzzwEtmedL6saz5zzb7yHZPY4MyhR0xBm9LJIlzpQBOLwgX32MTSLxbSmwXSps4ifBdEcgIlh0plZfkvoyUJOqq+7X9CiVivzuZ0bMZs/ZPJhHrXfDToYBmSCXVVRJPD71jMfQw=

addons:
  coverity_scan:
    # GitHub project metadata
    # ** specific to your project **
    project:
      name: LazyOpsDev/Minitwit.Backend
      version: 1.1.2
      description: Minitwit Backend Project

    # Where email notification of build analysis results will be sent
    notification_email: alsb@itu.dk

    # Commands to prepare for build_command
    # ** likely specific to your build **
    build_command_prepend: dotnet clean

    # The command that will be added as an argument to "cov-build" to compile your project for analysis,
    # ** likely specific to your build **
    build_command: dotnet build

    # Pattern to match selecting branches that will run analysis. We recommend leaving this set to 'coverity_scan'.
    # Take care in resource usage, and consider the build frequency allowances per
    #   https://scan.coverity.com/faq#frequency
    branch_pattern: coverity_scan